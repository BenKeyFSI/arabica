
/*
This c++ source file was generated by for Arabica
and is a derived work from the source document.
The source document contained the following notice:


Copyright (c) 2001 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details.

*/

#ifndef test_nodecloneattributescopied
#define test_nodecloneattributescopied

#include "dom_conf_test.hpp"

/**
 *     If the cloneNode method is used to clone an
 *     Element node, all the attributes of the Element are
 *     copied along with their values.
 *     
 *     Retrieve the last child of the second employee and invoke
 *     the cloneNode method.   The
 *     duplicate node returned by the method should copy the
 *     attributes associated with this node.
* @author NIST
* @author Mary Brady
* @see <a href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#ID-84CF096">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core#ID-84CF096</a>
*/

template<class string_type, class string_adaptor>
class nodecloneattributescopied : public DOMTestCase<string_type, string_adaptor> 
{
   public: 
     nodecloneattributescopied(std::string name) : DOMTestCase(name)
     {

       //   check if loaded documents are supported for content type
       const std::string contentType = getContentType();
    preload(contentType, "staff", true);
    }

  typedef typename DOMTestCase<string_type, string_adaptor> baseT;
  using baseT::DOMImplementation;
  using baseT::Document; 
  using baseT::DocumentType;
  using baseT::DocumentFragment; 
  using baseT::Node;
  using baseT::Element;
  using baseT::Attr;
  using baseT::NodeList;
  using baseT::NamedNodeMap;
  using baseT::Entity;
  using baseT::EntityReference;
  using baseT::CharacterData;
  using baseT::CDATASection;
  using baseT::Text;
  using baseT::Comment;
  using baseT::ProcessingInstruction;
  using baseT::Notation;

  typedef typename Arabica::DOM::DOMException DOMException;
  typedef string_type String;
  typedef string_adaptor SA;
  typedef bool boolean;

   /*
    * Runs the test case.
    */
   void runTest()
   {
      Document doc;
      NodeList elementList;
      Node addressNode;
      Node clonedNode;
      NamedNodeMap attributes;
      Node attributeNode;
      String attributeName;
      std::vector<string_type> result;
      
      std::vector<string_type> expectedResult;
      expectedResult.push_back(SA::construct_from_utf8("domestic"));
      expectedResult.push_back(SA::construct_from_utf8("street"));
      
      doc = (Document) load("staff", true);
      elementList = doc.getElementsByTagName(SA::construct_from_utf8("address"));
      addressNode = elementList.item(1);
      clonedNode = addressNode.cloneNode(false);
      attributes = clonedNode.getAttributes();
      for (int indexN65637 = 0; indexN65637 != attributes.getLength(); indexN65637++) {
          attributeNode = (Node) attributes.item(indexN65637);
    attributeName = attributeNode.getNodeName();
      result.push_back(attributeName);
        }
      assertEquals(expectedResult, result);
  
   }
  
   /*
    *  Gets URI that identifies the test.
    */
   std::string getTargetURI() const
   {
      return "http://www.w3.org/2001/DOM-Test-Suite/level1/core/nodecloneattributescopied";
   }
};

#endif
